function D = nemo_read_adcp(filename) %, startRow, endRow)
%NEMO_ADCP_IMPORT Import numeric data from a text file as column vectors.
%   D = NEMO_ADCP_IMPORT(FILENAME)
%   Reads data from text file FILENAME for the default selection.
%
%   D = IMPORTFILE(FILENAME, STARTROW, ENDROW) 
%   Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
%   Output: outputs struct 'D' with fields: x_rd, y_rd, z, time, depth,
%   ux, uy, U, TH, u_err.
%
% Example:
%   D = importfile('ZM E_2013-05-03_00h00m_until_2013-05-09_23h59m_t.1.type2.txt',27, 18134);
%
%    See also TEXTSCAN.
%
%   See also: nemo
%
% Bart Roest 2016
% Auto-generated by MATLAB on 2016/11/30 16:54:57

%% Copyright notice
%   --------------------------------------------------------------------
%   Copyright (C) 2016-2021 TU Delft
%       Bart Roest
%
%       l.w.m.roest@tudelft.nl
%
%       Stevinweg 1
%       2628CN Delft
%
%   This library is free software: you can redistribute it and/or modify
%   it under the terms of the GNU General Public License as published by
%   the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
%
%   This library is distributed in the hope that it will be useful,
%   but WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%   GNU General Public License for more details.
%
%   You should have received a copy of the GNU General Public License
%   along with this library.  If not, see <http://www.gnu.org/licenses/>.
%   --------------------------------------------------------------------

%% Version <http://svnbook.red-bean.com/en/1.5/svn.advanced.props.special.keywords.html>
% Created: 01 Dec 2016
% Created with Matlab version: 8.6.0.267246 (R2015b)
% $Id: $
% $Date: $
% $Author: $
% $Revision: $
% $HeadURL: $
% $Keywords: $

%% Initialize variables.
delimiter = ' ';
%if nargin<=2
    startRow = 27;
    endRow = inf;
    fillvalue = 999.999;
%end

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: text (%s)
%   column5: text (%s)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%s%s%f%f%f%f%f%f%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);


%% Allocate imported array to column variable names
D.x_rd   = dataArray{:, 1};
D.y_rd   = dataArray{:, 2};
D.z      = dataArray{:, 3};
datumstr = dataArray{:, 4};
timestr  = dataArray{:, 5};
D.depth  = dataArray{:, 6};
D.ux     = dataArray{:, 7};
D.uy     = dataArray{:, 8};
D.U      = dataArray{:, 9};
D.TH     = dataArray{:, 10};
D.u_err  = dataArray{:, 11};

D.time=datenum(datumstr,'yyyymmdd')+datenum(timestr,'HHMMSS')-datenum('00','HH'); %Remove pivotyear from second argument!
%datenum(datumstr,'yyyymmddHHMMSS');

%%
fn=fieldnames(D);
bins=length(unique(D.z));

for f=1:length(fn);
    D.(fn{f})(D.(fn{f})==fillvalue)=nan;
    D.(fn{f})=reshape(D.(fn{f}),bins,[]);
end
%EOF